#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string>
#include<fstream>
using namespace std;

class Game {
public:
    string word;
    int maxAttempts = 0;
    int attempts = 0;
    string guessedLetters;
    string guessedWord;
public:
    Game(const string& w, int mA) {
        word = w;
        maxAttempts = mA;
        guessedWord = "";
        for (int i = 0; i < word.length(); ++i) {
            guessedWord += "_";
        }
    }
    virtual bool isGameOver() = 0;
    virtual void display() = 0;
    virtual void makeGuess(char guess) = 0;
    bool isLetter(char c) {
        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }
    void play() {
        while (!isGameOver()) {
            display();
            cout << "Enter a letter: ";
            char guess;
            cin >> guess;
            makeGuess(guess);
        }
    }
};
class Hangman : public Game {
private:
    const string hangmanStages[7] = {
        "  +---+\n"
        "  |   |\n"
        "      |\n"
        "      |\n"
        "      |\n"
        "      |\n"
        "=========\n",
        "  +---+\n"
        "  |   |\n"
        "  O   |\n"
        "      |\n"
        "      |\n"
        "      |\n"
        "=========\n",
        "  +---+\n"
        "  |   |\n"
        "  O   |\n"
        "  |   |\n"
        "      |\n"
        "      |\n"
        "=========\n",
        "  +---+\n"
        "  |   |\n"
        "  O   |\n"
        " /|   |\n"
        "      |\n"
        "      |\n"
        "=========\n",
        "  +---+\n"
        "  |   |\n"
        "  O   |\n"
        " /|\\  |\n"
        "      |\n"
        "      |\n"
        "=========\n",
        "  +---+\n"
        "  |   |\n"
        "  O   |\n"
        " /|\\  |\n"
        " /    |\n"
        "      |\n"
        "=========\n",
        "  +---+\n"
        "  |   |\n"
        "  O   |\n"
        " /|\\  |\n"
        " / \\  |\n"
        "      |\n"
        "=========\n"
    };
public:
    Hangman(const string& w, int mA) : Game(w, mA) {
        if (word.length() <= 5) {
            for (int i = 0; i < 2; ++i) {
                int randomIndex = rand() % word.length();
                guessedWord[randomIndex] = word[randomIndex];
            }
        }
        else {
            for (int i = 0; i < 1; ++i) {
                int randomIndex = rand() % word.length();
                guessedWord[randomIndex] = word[randomIndex];
            }
        }
    }
    bool isGameOver()  {
        return attempts >= maxAttempts || guessedWord == word;
    }
    void display() {
        cout << hangmanStages[attempts] << endl;
        cout << "Word: " << guessedWord << endl;
        cout << "Attempts remaining: " << maxAttempts - attempts << endl;
    }
    bool isAlreadyGuessed(char guess) {
        for (int i = 0; i < guessedLetters.length(); ++i) {
            if (guessedLetters[i] == guess) {
                return true; 
            }
        }
        return false; 
    }
    void makeGuess(char guess)  {
        guess = tolower(guess);
        if (!isLetter(guess)) {
            cout << "Invalid input. Please enter a letter.\n";
            return;
        }
        if (isAlreadyGuessed(guess)) {
            cout << "You have already guessed that letter.\n";
            return;
        }
        guessedLetters += guess;
        bool correctGuess = false;
        for (int i = 0; i < word.length(); ++i) {
            if (word[i] == guess) {
                guessedWord[i] = guess;
                correctGuess = true;
            }
        }
        if (!correctGuess) {
            ++attempts;
            cout << "Incorrect guess.\n";
        }
    }
};
string selectWordFromFile() {
    ifstream file;
    string word;
    int wordCount = 0;
    while (true) {
        file.open("words.txt");
        if (!file.is_open()) {
            cout << "Error opening file." << endl;
            exit(1);
        }
        while (file >> word) {
            ++wordCount;
        }
        srand(time(0));
        int randomIndex = rand() % wordCount;
        file.close();
        file.open("words.txt");
        if (!file.is_open()) {
            cout << "Error reopening file." << endl;
            exit(1);
        }
        for (int i = 0; i < randomIndex; ++i) {
            file >> word;
        }
        file.close();
        if (wordCount > 0) {
            break;
        }
    }

    return word;
}
void playAgainstComputer() {
    string w = selectWordFromFile();
    int mA = 7; 
    Hangman game(w, mA);
    game.play();
    if (game.isGameOver() && game.guessedWord == game.word) {
        cout << "Congratulations! You guessed the word: " << game.word << endl;
    }
    else {
        cout << "Sorry, you ran out of attempts. The word was: " << game.word << endl;
    }
}
void playPlayerVsPlayer() {
    cout << "Player 1, enter the word to be guessed: ";
    string word;
    cin >> word;
    cout << "\033[2J\033[1;1H"; 
    int mA = 7; 
    Hangman game(word, mA);
    game.play();
    if (game.isGameOver() && game.guessedWord == game.word) {
        cout << "Congratulations! Player 2 guessed the word: " << game.word << endl;
    }
    else {
        cout << "Sorry, Player 2 ran out of attempts. The word was: " << game.word << endl;
    }
}
int main() {
    int choice;
    MainMenu:
    cout << "Hangman Game"<<endl;
    cout << "1. Play against computer"<<endl;
    cout << "2. Player vs Player"<<endl;
    cout << "3.Exit" << endl;
    cout << "Enter your choice: " << endl;
    cin >> choice;
    switch (choice) {
    case 1:
        playAgainstComputer();
        goto MainMenu;
        break;
    case 2:
        playPlayerVsPlayer();
        goto MainMenu;
        break;
    case 3:
        cout << "Exiting....." << endl;
        break;
    default:
        cout << "Invalid choice."<<endl;
        goto MainMenu;
    }

    return 0;
}
